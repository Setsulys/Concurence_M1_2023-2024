package fr.uge.exam.exo3;

import java.util.concurrent.atomic.AtomicIntegerArray;

public class MaxRecorderLockFree {
	 private final AtomicIntegerArray maximums;

	    public MaxRecorderLockFree(int size) {
	        if (size < 1) {
	            throw new IllegalArgumentException("Invalid size");
	        }
	        this.maximums = new AtomicIntegerArray(size);
	        Arrays.setAll(maximums, __ -> -1); // the elements processed are >=0, we can safely initialize with -1
	    }

	    /**
	     * Return the index of the first occurrence of the minimal element in a
	     * non-empty array
	     */
	    private static int findIndexOfMinimum(int[] t) {
	        if (t.length == 0) {
	            throw new IllegalArgumentException();
	        }
	        var min = t[0];
	        var index = 0;
	        for (var i = 1; i < t.length; i++) {
	            if (t[i] < min) {
	                min = t[i];
	                index = i;
	            }
	        }
	        return index;
	    }

	    public boolean process(int value) {
	        if (value < 0) {
	            throw new IllegalArgumentException("Argument must be >=0");
	        }
	        var indexMin = findIndexOfMinimum(maximums);
	        if (value > maximums[indexMin]) {
	            maximums[indexMin] = value;
	            return true;
	        }
	        return false;
	    }
}
