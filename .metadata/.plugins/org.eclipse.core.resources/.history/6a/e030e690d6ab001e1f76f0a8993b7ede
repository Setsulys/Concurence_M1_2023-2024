package fr.uge.exam.exo1;

import java.util.ArrayList;
import java.util.concurrent.locks.ReentrantLock;

public class Sack {

	private int maxWeight;
	private final ArrayList<Integer> hotte;
	private ReentrantLock lock = new ReentrantLock();
	
	public Sack(int maxWeight) {
		if(maxWeight <0) {
			throw new IllegalArgumentException();
		}
		this.maxWeight= maxWeight;
		this.hotte = new ArrayList<>();
	}
	public void putGift(int weight) throws InterruptedException {
		lock.lock();
		try {
			while(hotte.stream().mapToInt(e->e).sum()+weight > maxWeight) {
				lock.wait();
			}
			hotte.add(weight);
			lock.notifyAll();	
		}finally {
			lock.unlock();
		}
	}
	
	
	public int takeGift() throws InterruptedException {
		synchronized(lock) {
			while(hotte.stream().mapToInt(e->e).sum() <=0) {
				lock.wait();
			}
			var taken = hotte.removeLast();
			lock.notifyAll();
			return taken;
		}
	}
}
