package revisoninterruption;

import java.util.stream.IntStream;

public class Gate {

	private final int maxThread;
	private int arrived;
	private final Object lock = new Object();
	
	public Gate(int nbThread) {
		if(nbThread < 0) {
			throw new IllegalArgumentException();
		}
		this.maxThread = nbThread;
		this.arrived = 0;
	}
	
	public void waitAt() throws InterruptedException {
		synchronized(lock) {
			arrived++;
			while(maxThread != arrived) {
				lock.wait();
			}
		}
	}
	
	public static void main(String[] args) {
	    var nbThreads = 100;
	    var tab = new Thread[nbThreads];

	    var barrier = new Gate(nbThreads);

	    IntStream.range(0, nbThreads).forEach(i -> {
	      tab[i] = Thread.ofPlatform().start(() -> {
	        try {
	          // Thread.sleep(100);
	          barrier.waitAt();
	          System.out.print(i + " ");
	        } catch (InterruptedException e) {
	          return;
	        }
	      });
	    });

	    try {
	      Thread.sleep(100);
	      tab[50].interrupt();
	    } catch (InterruptedException e) {
	      throw new AssertionError(e);
	    }
	  }
}
